#include <stdarg.h>
#include <stdint.h>
#include <stdio.h>
#include <string>

#include <nlohmann/json.hpp>
using json = nlohmann::json;

// nlohmann json needs this in order to serialize a std::wstring

[[nodiscard]] inline
std::string VFormatStdString(_Printf_format_string_ char const* const pFmt, va_list args)
{
    char buffer[2048];
    vsprintf_s(buffer, pFmt, args);
    return std::string{ buffer };
}

[[nodiscard]] inline
std::string FormatStdString(_Printf_format_string_ char const* const pFmt, ...)
{
    va_list args;
    va_start(args, pFmt);
    auto result = VFormatStdString(pFmt, args);
    va_end(args);
    return result;
}

namespace std
{
    extern void to_json(json& j, std::wstring const& ws);
} // namespace std

/*
    Example JSON data from https://openweathermap.org/current

{
  "coord": {
    "lon": 10.99,
    "lat": 44.34
  },
  "weather": [
    {
      "id": 501,
      "main": "Rain",
      "description": "moderate rain",
      "icon": "10d"
    }
  ],
  "base": "stations",
  "main": {
    "temp": 298.48,
    "feels_like": 298.74,
    "temp_min": 297.56,
    "temp_max": 300.05,
    "pressure": 1015,d
    "humidity": 64,
    "sea_level": 1015,
    "grnd_level": 933
  },
  "visibility": 10000,
  "wind": {
    "speed": 0.62,
    "deg": 349,
    "gust": 1.18
  },
  "rain": {
    "1h": 3.16
  },
  "clouds": {
    "all": 100
  },
  "dt": 1661870592,
  "sys": {
    "type": 2,
    "id": 2075663,
    "country": "IT",
    "sunrise": 1661834187,
    "sunset": 1661882248
  },
  "timezone": 7200,
  "id": 3163858,
  "name": "Zocca",
  "cod": 200
}
*/

// Everything from here down was generated by Copilot through series of tabs to accept suggestions
// and enter to move to next line.

struct Coord
{
    double lon;
    double lat;
};

struct Weather
{
    int id;
    std::string main;
    std::string description;
    std::string icon;
};

struct Main
{
    double temp;
    double feels_like;
    double temp_min;
    double temp_max;
    int pressure;
    int humidity;
    int sea_level;
    int grnd_level;
};

struct Wind
{
    double speed;
    int deg;
    double gust;
};

struct Rain
{
    double h1;
};

struct Clouds
{
    int all;
};

struct Sys
{
    int type;
    int id;
    std::string country;
    int sunrise;
    int sunset;
};

struct WeatherData
{
    Coord coord;
    Weather weather;
    std::string base;
    Main main;
    int visibility;
    Wind wind;
    Rain rain;
    Clouds clouds;
    int dt;
    Sys sys;
    int timezone;
    int id;
    std::string name;
    int cod;
};

void to_json(json& j, Coord const& p)
{
    j = json{
        { "lon", p.lon },
        { "lat", p.lat }
    };
}

void from_json(json const& j, Coord& p)
{
    j.at("lon").get_to(p.lon);
    j.at("lat").get_to(p.lat);
}

void to_json(json& j, Weather const& p)
{
    j = json{
        { "id", p.id },
        { "main", p.main },
        { "description", p.description },
        { "icon", p.icon }
    };
}

void from_json(json const& j, Weather& p)
{
    j.at("id").get_to(p.id);
    j.at("main").get_to(p.main);
    j.at("description").get_to(p.description);
    j.at("icon").get_to(p.icon);
}

void to_json(json& j, Main const& p)
{
    j = json{
        { "temp", p.temp },
        { "feels_like", p.feels_like },
        { "temp_min", p.temp_min },
        { "temp_max", p.temp_max },
        { "pressure", p.pressure },
        { "humidity", p.humidity },
        { "sea_level", p.sea_level },
        { "grnd_level", p.grnd_level }
    };
}

void from_json(json const& j, Main& p)
{
    j.at("temp").get_to(p.temp);
    j.at("feels_like").get_to(p.feels_like);
    j.at("temp_min").get_to(p.temp_min);
    j.at("temp_max").get_to(p.temp_max);
    j.at("pressure").get_to(p.pressure);
    j.at("humidity").get_to(p.humidity);
    j.at("sea_level").get_to(p.sea_level);
    j.at("grnd_level").get_to(p.grnd_level);
}

void to_json(json& j, Wind const& p)
{
    j = json{
        { "speed", p.speed },
        { "deg", p.deg },
        { "gust", p.gust }
    };
}

void from_json(json const& j, Wind& p)
{
    j.at("speed").get_to(p.speed);
    j.at("deg").get_to(p.deg);
    j.at("gust").get_to(p.gust);
}

void to_json(json& j, Rain const& p)
{
    j = json{
        { "1h", p.h1 }
    };
}

void from_json(json const& j, Rain& p)
{
    j.at("1h").get_to(p.h1);
}

void to_json(json& j, Clouds const& p)
{
    j = json{
        { "all", p.all }
    };
}

void from_json(json const& j, Clouds& p)
{
    j.at("all").get_to(p.all);
}

void to_json(json& j, Sys const& p)
{
    j = json{
        { "type", p.type },
        { "id", p.id },
        { "country", p.country },
        { "sunrise", p.sunrise },
        { "sunset", p.sunset }
    };
}

void from_json(json const& j, Sys& p)
{
    j.at("type").get_to(p.type);
    j.at("id").get_to(p.id);
    j.at("country").get_to(p.country);
    j.at("sunrise").get_to(p.sunrise);
    j.at("sunset").get_to(p.sunset);
}

void to_json(json& j, WeatherData const& p)
{
    j = json{
        { "coord", p.coord },
        { "weather", p.weather },
        { "base", p.base },
        { "main", p.main },
        { "visibility", p.visibility },
        { "wind", p.wind },
        { "rain", p.rain },
        { "clouds", p.clouds },
        { "dt", p.dt },
        { "sys", p.sys },
        { "timezone", p.timezone },
        { "id", p.id },
        { "name", p.name },
        { "cod", p.cod }
    };
}

void from_json(json const& j, WeatherData& p)
{
    j.at("coord").get_to(p.coord);
    j.at("weather").get_to(p.weather);
    j.at("base").get_to(p.base);
    j.at("main").get_to(p.main);
    j.at("visibility").get_to(p.visibility);
    j.at("wind").get_to(p.wind);
    j.at("rain").get_to(p.rain);
    j.at("clouds").get_to(p.clouds);
    j.at("dt").get_to(p.dt);
    j.at("sys").get_to(p.sys);
    j.at("timezone").get_to(p.timezone);
    j.at("id").get_to(p.id);
    j.at("name").get_to(p.name);
    j.at("cod").get_to(p.cod);
}

WeatherData ParseWeatherData(std::string const& jsonText)
{
    WeatherData data;
    json j = json::parse(jsonText);

    j.get_to(data);
    return data;
}